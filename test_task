import React, { useState } from "react";

interface Param {
  id: number;
  name: string;
  type: "string";
}

interface ParamValue {
  paramId: number;
  value: string;
}

interface Model {
  paramValues: ParamValue[];
}

interface Props {
  params: Param[];
  model: Model;
}

const ParamEditor: React.FC<Props> = ({ params, model }) => {
  const [paramValues, setParamValues] = useState<ParamValue[]>(model.paramValues);

  const handleInputChange = (paramId: number, value: string) => {
    const updatedValues = paramValues.map((item) =>
      item.paramId === paramId ? { ...item, value } : item
    );
    setParamValues(updatedValues);
  };

  const getModel = (): Model => {
    return { paramValues };
  };

  return (
    <div>
      <h2>Редактор параметров</h2>
      {params.map((param) => {
        const currentValue = paramValues.find((item) => item.paramId === param.id)?.value || "";
        return (
          <div key={param.id} style={{ marginBottom: "10px" }}>
            <label>
              {param.name}:
              <input
                type="text"
                value={currentValue}
                onChange={(e) => handleInputChange(param.id, e.target.value)}
                style={{ marginLeft: "10px" }}
              />
            </label>
          </div>
        );
      })}
      <button onClick={() => console.log(getModel())} style={{ marginTop: "20px" }}>
        Вывести модель в консоль
      </button>
    </div>
  );
};

const params: Param[] = [
  { id: 1, name: "Назначение", type: "string" },
  { id: 2, name: "Длина", type: "string" },
];

const model: Model = {
  paramValues: [
    { paramId: 1, value: "повседневное" },
    { paramId: 2, value: "макси" },
  ],
};

const App = () => {
  return (
    <div>
      <ParamEditor params={params} model={model} />
    </div>
  );
};

export default App;
